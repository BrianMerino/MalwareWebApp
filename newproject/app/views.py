from django.http import HttpResponse, request
from django.views.generic import ListView
import json
from .utils import search_malware, count_docs, check_polyglot
from django.core.paginator import Paginator

#use 0a41639560bc9e67077bbae47f11ee304362d5bda1820460db766f309d3e348f as sample hash query

class HomePageView(ListView):
    template_name='home.html'
    def get_queryset(self):
        total_documents = count_docs()
        context = {
        'total_documents' : total_documents
        }
        return context

#view for search results page
class SearchResultsView(ListView):
    template_name= 'search_results.html'
    results = {}
    t = tuple()
    def get_queryset(self):
        query = self.request.GET.get('q')
        results = {'Results' : search_malware(query)}
        number_mal = 1
        details_dict = {}
        for result in results['Results']:
            details_dict[number_mal] = ({
                    'Id' : result['_id'],
                    'Hash' : result['Hash'],
                    'Filetype' : result['Analysis']['data']['attributes']['type_description'],
                    'Reputation' : result['Analysis']['data']['attributes']['reputation'],
                    'Size' : result['Analysis']['data']['attributes']['size'],
                    'sha1' : result['Analysis']['data']['attributes']['sha1'],
                    'Polyglot' : check_polyglot(result['Analysis']['data']['attributes']),
                    'jsonstring' : json.dumps(result, indent=4, default=str),
                })
            number_mal += 1

        t = tuple(details_dict.items())

        MALWARE_PER_PAGE = 4
        paginator = Paginator(t, MALWARE_PER_PAGE)

        page_num = self.request.GET.get('page', 1)
        page = paginator.page(page_num)
        blacklisted = ['jsonstring']
        all_pages = paginator.num_pages
        current_page = self.request.GET.get('page')  # Actual page
        context = {
        "paginator" : page,
        "query" : query,
        "blacklist" : blacklisted,
        "totalpages" : all_pages,
        "current_page" : current_page
        }
        return context

#view that creates download link for json
def download_file(request):
    filename = 'info.json'
    fl = open(filename, 'r')
    response = HttpResponse(fl, content_type='application/json')
    response['Content-Disposition'] = "attachment; filename=%s" % filename
    return response       